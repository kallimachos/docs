====================
Docs Down Under 2017
====================

.. ifnotslides::

   `View slide presentation
   <http://kallimachos.github.io/docs/slides/talks/DDU-2017.html#1>`_

.. ifslides::

   .. rst-class:: title-image

      .. figure:: ../images/bash-logo.png


Welcome
~~~~~~~

-  Your hosts for the day: Brian Moss and Lana Brindley

.. rst-class:: build

-  Please hold questions until the end of each talk.
-  For speakers, we will give you a signal when you have 5 minutes remaining.

Docs-as-code
~~~~~~~~~~~~

-  definition goes here with link to Anne's site

.. rst-class:: build

-  Not a new idea in open source communities, but still evolving.
-  Writers have more opportunity than to be involved with infrastructure.
-  Writers know their development requirements and the needs of their users.


Imposter!
~~~~~~~~~

-  Writers may not have a background in software development and may be
   hesitant to mess around with tools.

.. rst-class:: build

-  But we are called **technical** writers for a reason.
-  **Give it a go.** Struggling to get things working is a great way to learn.
-  It is empowering to solve problems with code, and we don't always have
   access to a developer.
-  What's the worst that could happen?
-  The story of sphinxmark <link>.


Think like a writer
~~~~~~~~~~~~~~~~~~~

-  Writers have a highly useful skill set, so use it!

.. rst-class:: build

-  "We can teach you technology; we can't teach you how to write."


Research
~~~~~~~~

-  Gather requirements before you begin.

.. rst-class:: build

-  Get approval as required and consensus from your colleagues for changes that
   affect work flow or UX.
-  Search for existing solutions before you start coding; there's a reasonable
   chance someone else has had the same problem. Learn from their work and
   use it if you can can; there's no point reinventing the wheel. Look for
   ideas in established projects.
-  Google and Stack Overflow are your friends.
-  Reading documentation is a pretty good idea too. Consuming tech docs
   improves your own writing no end, and you might even find a new project to
   contribute to.
-  Simplify as much as possible: stick to one language, framework, CI/CD tool,
   etc. Unless your company has mandated products that they buy for you, I
   strongly recommend free and open source software. Most documentation will
   come nowhere close to outgrowing free-tier tools.


Draft
~~~~~

-  Think about how you want to organize scripts/code on your system; changing
   later is hard.

.. rst-class:: build

-  You have never gone so far down one path that you can't try another.
-  Work on a branch, not on production, and always be able to roll back.
-  Code with reuse in mind; structure your work with consideration for future
   changes.
-  Code consistently; adopt an upstream style guide.
-  Document your work. You **will** thank yourself later.


Review
~~~~~~

-  Automated testing is great, although it does have limitations.

.. rst-class:: build

-  Ask other writers to test your work.
-  Ask your friendly neighborhood developer to have a look at your code.
-  Advertise your changes.


Publish
~~~~~~~

-  Continuous integration and continuous deployment are great.

.. rst-class:: build

-  Contribute your tools work upstream; avoid bespoke solutions when possible
   (don't just help yourself, help everyone).
-  http://kallimachos.github.io/docs/

Schedule
~~~~~~~~

Table goes here.


Questions
~~~~~~~~~

-  Your questions go here.
