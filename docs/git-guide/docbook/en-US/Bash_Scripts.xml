<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Git_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="sect-Guide_Guide-Helpful_bash_scripts">
	<title>Helpful bash scripts</title>
	 <para>
		The following bash scripts can be used to run certain git commands across several repositories. These scripts can be run from any directory, and will return you to the directory in which you started. Note that you must set the directory paths in each script to the location of the repositories on your local machine.
	</para>
	 <section id="sect-Git-Helpful_bash_scripts-repocheck">
		<title>repocheck</title>
		 <para>
			This script runs <command>git status -s</command> on each repository. It is helpful for checking if you have any work that has not been committed or pushed. Note that the output is the short (-s) version. No message means that the working directory is clean. If you receive a message, run <command>git status</command> on the indicated repository for full information.
		</para>
		 <para>
			Example:
<screen>
$ <command>repocheck</command>

/docs/administration-guide

/docs/release-notes

/docs/rest-api-guide

/docs/user-guide
</screen>
		</para>
		 <para>
			Script:
		</para>
<screen>
#!/bin/bash

for dir in ~/docs/*; do
	cd "$dir"
	if test -e .git; then
		echo $dir
		git status -s &amp;&amp; echo
	fi
done
</screen>
	</section>
	 <section id="sect-Git-Helpful_bash_scripts-master">
		<title>master</title>
		 <para>
			This script runs <command>git checkout master</command> on all repositories. Note that if you run this command with uncommitted changes in non-master branches, those changes will be copied to their corresponding master branch.
		</para>
		 <para>
			Example:
<screen>
$ <command>master</command>

/docs/administration-guide
Already on 'master'

/docs/release-notes
Already on 'master'

/docs/rest-api-guide
Already on 'master'

/docs/user-guide
Already on 'master'
</screen>
		</para>
		 <para>
			Script:
<screen>
#!/bin/bash

for dir in ~/docs/*; do
	cd "$dir"
	if test -e .git; then
		echo $dir
		git checkout master &amp;&amp; echo
	fi
done
</screen>
		</para>
	</section>
	<section id="sect-Git-Helpful_bash_scripts-branchlist">
		<title>branchlist</title>
		 <para>
			This script runs <command>git branch -a</command> on all repositories. It shows you all the local and remote branches, and indicates which branches you have checked out. Remove the <command>-a</command> option to view only local branches.
		</para>
		 <para>
			Example:
<screen>
$ <command>branchlist</command>

/docs/administration-guide
* master
  remotes/origin/1.0
  remotes/origin/1.1
  remotes/origin/master

/docs/release-notes
  Enterprise
  Online
* master
  remotes/origin/Enterprise
  remotes/origin/Online
  remotes/origin/master

/docs/rest-api-guide
  Enterprise
* master
  remotes/origin/Enterprise
  remotes/origin/master

/docs/user-guide
  Enterprise
* master
  remotes/origin/Enterprise
  remotes/origin/master

</screen>
		</para>
		 <para>
			Script:
<screen>
#!/bin/bash

for dir in ~/docs/*; do
	cd "$dir"
	if test -e .git; then
		echo $dir
		git branch -a &amp;&amp; echo
	fi
done
</screen>
		</para>
	</section>
	 <section id="sect-Git-Helpful_bash_scripts-pullall">
		<title>pullall</title>
		 <para>
			This script runs <command>git pull</command> on all remote repositories. It is helpful for pulling down changes from all the remote repositories in one action.
		</para>
		 <para>
			Example:
<screen>
$ <command>pullall</command>

/docs/administration-guide
Already up-to-date.

/docs/release-notes
Already up-to-date.

/docs/REST-api-guide
Already up-to-date.

/docs/user-guide
Already up-to-date.
</screen>
		</para>
		 <para>
			Script:
<screen>
#!/bin/bash

for dir in ~/docs/*; do
	cd "$dir"
	if test -e .git; then
		echo $dir
		git pull &amp;&amp; echo
	fi
done
</screen>
		</para>
	</section>
</chapter>