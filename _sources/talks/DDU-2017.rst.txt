====================
Docs Down Under 2017
====================

.. ifnotslides::

   `View slide presentation
   <http://kallimachos.github.io/docs/slides/talks/DDU-2017.html#1>`_

.. ifslides::

   .. rst-class:: title-image

      .. figure:: ../images/kangaroo.png


Welcome
~~~~~~~

Your hosts for the day:

-  Brian Moss
-  Lana Brindley


Docs like code
~~~~~~~~~~~~~~

.. rst-class:: build

-  Collaborating with contributors efficiently by keeping docs close to code or
   in the same system as code, with a source file concept and an output for
   deliverables.
-  Applying software development tools and techniques to documentation
   development.
-  Automating and integrating documentation builds so you and your teams can
   focus on content.
-  http://docslikecode.com/

.. nextslide::

.. rst-class:: build

-  Not a new idea in open source communities, but still evolving.
-  Writers have more opportunity to be involved with infrastructure.
-  Writers know their development requirements and the needs of their users.
-  Encourages contributions from other contributors.


Imposter!
~~~~~~~~~

.. rst-class:: build

-  Writers may not have a background in software development and may be
   hesitant to mess around with tools.
-  But we are called **technical** writers for a reason.
-  **Give it a go.** Struggling to get things working is a great way to learn.
-  It is empowering to solve problems with code, and we don't always have
   access to a developer.
-  What's the worst that could happen?
-  The story of sphinxmark (https://kallimachos.github.io/sphinxmark/).


Think like a writer
~~~~~~~~~~~~~~~~~~~

.. rst-class:: build

-  Writers have a highly useful skill set, so use it!
-  "We can teach you technology; we can't teach you how to write."


Research
~~~~~~~~

.. rst-class:: build

-  Gather requirements before you begin.
-  Get approval.
-  Get consensus from your colleagues for changes that affect work flow or UX.
-  Search for existing solutions before you start coding; there's a reasonable
   chance someone else has had the same problem.
-  Google and Stack Overflow are your friends.
-  Reading documentation is a pretty good idea too. Consuming tech docs
   improves your own writing no end, and you might even find a new project to
   contribute to.
-  Simplify as much as possible: stick to one language, framework, CI/CD tool,
   etc.


Draft
~~~~~

.. rst-class:: build

-  Think about structure; changing later is hard.
-  You have never gone so far down one path that you can't try another.
-  Work on a branch, not on production, and always be able to roll back.
-  Code with reuse in mind; structure your work with consideration for future
   changes.
-  Code consistently; adopt an upstream style guide.
-  Document your work. You **will** thank yourself later.


Review
~~~~~~

.. rst-class:: build

-  Automated testing is great, although it does have limitations.
-  Ask other writers to test your work.
-  Ask your friendly neighborhood developer to have a look at your code.
-  Advertise your changes.


Publish
~~~~~~~

.. rst-class:: build

-  Continuous integration and continuous deployment are great.
-  Contribute your tools work upstream; avoid bespoke solutions when possible
   (don't just help yourself, help everyone).
-  http://kallimachos.github.io/docs/


Schedule
~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 10 60 30

   * - Time
     - Title
     - Speaker
   * - 10:40
     - Welcome
     - Brian Moss
   * - 11:00
     - Quiz
     - Lana Brindley
   * - 12:00
     - Prize Session
     -
   * - 12:20
     - LUNCH
     -
   * - 13:20
     - Stephen King's practical advice for tech writers
     - 	Rikki Endsley
   * - 14:00
     - Sorting out the mess: How information architecture can help
     - Darren Chan
   * - 14:20
     - Kernel documentation: What we have and where it's going
     - Jonathan Corbet

.. nextslide::

.. list-table::
   :header-rows: 1
   :widths: 10 60 30

   * - Time
     - Title
     - Speaker
   * - 15:00
     - TEA
     -
   * - 15:40
     - Writing less, saying more: UX lessons from the small screen
     - Claire Mahoney
   * - 16:20
     - Effective docs writing: Practical writing style explained with computer
       science
     - Joe Robinson
   * - 16:40
     - Helping caterpillars fly
     - Nicola Nye
   * - 17:20
     - END
     -
